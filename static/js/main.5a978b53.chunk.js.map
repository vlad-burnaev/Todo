{"version":3,"sources":["Todo/Context.jsx","Todo/TodoItem.jsx","Todo/TodoList.jsx","Loading.jsx","Modal/Modal.js","App.jsx","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","index","onChange","removeTodo","useContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","cursor","btn","classes","completed","push","style","className","join","type","id","checked","title","onClick","TodoList","todos","onToggle","listStyle","margin","map","key","class","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","Promise","resolve","setTimeout","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","Loading","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a978b53.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from \"react\";\r\nimport Context from \"./Context\";\r\n\r\nfunction TodoItem({ todo, index, onChange }) {\r\n  const { removeTodo } = useContext(Context);\r\n\r\n  const styles = {\r\n    li: {\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n      alignItems: \"center\",\r\n      padding: \".5rem\",\r\n      border: \"1px solid #ccc\",\r\n      borderRadius: \"4px\",\r\n      marginBottom: \".5rem\",\r\n    },\r\n    input: {\r\n      marginRight: \".5rem\",\r\n      cursor: \"pointer\",\r\n    },\r\n    btn: {\r\n      cursor: \"pointer\",\r\n    },\r\n  };\r\n\r\n  const classes = [];\r\n  if (todo.completed) {\r\n    classes.push(\"done\");\r\n  }\r\n\r\n  return (\r\n    <li style={styles.li}>\r\n      <span className={classes.join(\" \")}>\r\n        <input\r\n          type=\"checkbox\"\r\n          style={styles.input}\r\n          onChange={() => onChange(todo.id)}\r\n          checked={todo.completed}\r\n        />\r\n        <strong>{index + 1}</strong>\r\n        &nbsp;\r\n        {todo.title}\r\n      </span>\r\n      <button\r\n        type=\"submit\"\r\n        style={styles.btn}\r\n        onClick={() => {\r\n          removeTodo(todo.id);\r\n        }}\r\n      >\r\n        &#10006;\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nfunction TodoList({ todos, onToggle }) {\r\n  const styles = {\r\n    ul: {\r\n      listStyle: \"none\",\r\n      margin: 0,\r\n      padding: 0,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {todos.map((todo, index) => {\r\n        return (\r\n          <TodoItem\r\n            todo={todo}\r\n            index={index}\r\n            key={todo.id}\r\n            onChange={onToggle}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <div class=\"lds-ring\">\r\n        <div />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nexport default class Modal extends React.Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button className=\"btn\" onClick={() => this.setState({ isOpen: true })}>\r\n          Open modal\r\n        </button>\r\n\r\n        {this.state.isOpen && (\r\n          <div className=\"modal\">\r\n            <div className=\"modal-body\">\r\n              <h3>Modal window</h3>\r\n              <p>This modal window is awesome</p>\r\n\r\n              <button\r\n                className=\"btn\"\r\n                onClick={() => this.setState({ isOpen: false })}\r\n              >\r\n                Close modal\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport TodoList from \"./Todo/TodoList\";\nimport Context from \"./Todo/Context\";\nimport Loading from \"./Loading\";\nimport Modal from \"./Modal/Modal\";\n\nconst AddTodo = React.lazy(\n  () =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(import(\"./Todo/AddTodo\"));\n      }, 2000);\n    })\n);\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=5\")\n      .then((response) => response.json())\n      .then((todos) => {\n        setTimeout(() => {\n          setTodos(todos);\n          setLoading(false);\n        }, 2000);\n      });\n  }, []);\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) todo.completed = !todo.completed;\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  function addTodo(title) {\n    setTodos(\n      todos.concat([\n        {\n          id: Date.now(),\n          completed: false,\n          title: title,\n        },\n      ])\n    );\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"wrapper\">\n        <h1>Todo list</h1>\n        <Modal />\n        <React.Suspense fallback={<p>Loading...</p>}>\n          <AddTodo onCreate={addTodo} />\n        </React.Suspense>\n        {loading && <Loading />}\n        {todos.length ? (\n          <TodoList todos={todos} onToggle={toggleTodo} />\n        ) : loading ? null : (\n          <p>No todos!</p>\n        )}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}